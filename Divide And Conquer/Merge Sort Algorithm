#include <iostream>
using namespace std;

void  Merge(int *arr,int n,int s,int e){
	int mid=s+(e-s)/2;
	//len1 and len 2 denotes the divided array
	int len1=mid-s+1;
	int len2=e-mid;
 
	//creating the two array of len1 and len2 dynamically
	int *left=new int(len1);
	int *right=new int(len2);

	//copy the main array element into the left array
	int k=s;
	for(int i=0;i<len1;i++){
		left[i]=arr[k];
		k++;
	}

	//copy the main array element into the right array
	 k=mid+1;
	for(int i=0;i<len2;i++){
		right[i]=arr[k];
		k++;
	}

	//logic of merging 
	int leftIndex=0;
	int RightIndex=0;
	int MainIndex=s;
	
	while(leftIndex <len1 && RightIndex<len2){
		if(left[leftIndex]<right[RightIndex]){
			arr[MainIndex]=left[leftIndex];
			leftIndex++;
			MainIndex++;
		}
		else{
			arr[MainIndex]=right[RightIndex];
			RightIndex++;
			MainIndex++;
		}
	}

	while(leftIndex<len1){
		arr[MainIndex]=left[leftIndex];
		leftIndex++;
		MainIndex++;
	}

	while(RightIndex<len2){
		arr[MainIndex]=right[RightIndex];
		RightIndex++;
		MainIndex++;
	}
	
}
void MergeSort(int *arr,int n,int s,int e){
	
	if(s>=e){
		return;
	}

	int mid=s+(e-s)/2;

	MergeSort(arr,n,s,mid);
	MergeSort(arr,n,mid+1,e);
	Merge(arr,n,s,e);
}
int main() {
  int arr[]={7,3,2,16,24,4,11,9};
	int n=8;
  int s=0;
	int e=n-1;
	MergeSort(arr,n,s,e);

	for(int i=0;i<n;i++){
		cout<<arr[i]<<" ";
	}
	
}
